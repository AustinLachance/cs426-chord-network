#include <unistd.h>

#include <QVBoxLayout>
#include <QApplication>
#include <QDebug>

#include "main.hh"

ChatDialog::ChatDialog()
{
	setWindowTitle("Peerster");

	// Read-only text box where we display messages from everyone.
	// This widget expands both horizontally and vertically.
	textview = new QTextEdit();
	textview->setReadOnly(true);

	// Small text-entry box the user can enter messages.
	// Default focus upon application start
	// This widget normally expands only horizontally,
	// leaving extra vertical space for the textview widget.
	//
	// You might change this into a read/write QTextEdit,
	// so that the user can easily enter multi-line messages.
	textline = new MultiLineEdit();
	textline->setFocus();
	textline->setMaximumHeight(50);

	// Create the share file button
	shareFileButton = new QPushButton("Share a File");

	QLabel *editorLabel = new QLabel();
	editorLabel->setText("Send messages here!");
	
	addPeersLine = new MultiLineEdit();
	addPeersLine->setMaximumHeight(50);

	QLabel *peersLabel = new QLabel();
	peersLabel->setText("Add peer with host:port");

	// Lay out the widgets to appear in the main window.
	// For Qt widget and layout concepts see:
	// http://doc.qt.nokia.com/4.7-snapshot/widgets-and-layouts.html
	// QStringList list;
	// list << "Hello" << "Yep";

	QLabel *privateMsgLabel = new QLabel();
	privateMsgLabel->setText("Slide into the DMs");
	privateMsgList = new QListWidget();

	// Text editor for sending messages and adding new friends
	QVBoxLayout *editingLayout = new QVBoxLayout();
	editingLayout->addWidget(editorLabel);
	editingLayout->addWidget(textline);
	editingLayout->addWidget(peersLabel);
	editingLayout->addWidget(addPeersLine);

	// List of friends that you can send private messages
	QVBoxLayout *privateMsgLayout = new QVBoxLayout();
	privateMsgLayout->addWidget(privateMsgLabel);
	privateMsgLayout->addWidget(privateMsgList);

	QHBoxLayout *bottomLayout = new QHBoxLayout();
	bottomLayout->addLayout(editingLayout);
	bottomLayout->addLayout(privateMsgLayout);

	QVBoxLayout *fileLayout = new QVBoxLayout();
	fileLayout->addWidget(shareFileButton);

	QHBoxLayout *topLayout = new QHBoxLayout();
	topLayout->addWidget(textview);
	topLayout->addLayout(fileLayout);

	QVBoxLayout *mainLayout = new QVBoxLayout();
	mainLayout->addLayout(topLayout);
	mainLayout->addLayout(bottomLayout);
	setLayout(mainLayout);
}


// Return the textView of the ChatDialog
QTextEdit *ChatDialog::getTextView() {
	return textview;
}


// Return the text editor of the ChatDialog
MultiLineEdit *ChatDialog::getTextLine() {
	return textline;
}


// Return the add Peers text line of the ChatDialog
MultiLineEdit *ChatDialog::getAddPeersLine() {
	return addPeersLine;
}

QListWidget *ChatDialog::getPrivateMsgList() {
	return privateMsgList;
}


// Return the share file button of the ChatDialog
QPushButton *ChatDialog::getShareFileButton() {
	return shareFileButton;
}


// NetSocket constructor
NetSocket::NetSocket()
{
	// Pick a range of four UDP ports to try to allocate by default,
	// computed based on my Unix user ID.
	// This makes it trivial for up to four Peerster instances per user
	// to find each other on the same host,
	// barring UDP port conflicts with other applications
	// (which are quite possible).
	// We use the range from 32768 to 49151 for this purpose.
	myPortMin = 32768 + (getuid() % 4096)*4;
	myPortMax = myPortMin + 3;
}

// Bind socket to a UDP port
bool NetSocket::bind()
{
	// Try to bind to each of the range myPortMin..myPortMax in turn.
	for (int p = myPortMin; p <= myPortMax; p++) {
		if (QUdpSocket::bind(p)) {
			qDebug() << "bound to UDP port " << p;
			myPortVal = p;
			return true;
		}
	}

	qDebug() << "Oops, no ports in my default range " << myPortMin
		<< "-" << myPortMax << " available";
	return false;
}


// Return the min port
int NetSocket::getMyPortMin() {
	return myPortMin;
}


// Return the max port
int NetSocket::getMyPortMax() {
	return myPortMax;
}

// Return the bound port
int NetSocket::getMyPortVal() {
	return myPortVal;
}


Peer::Peer() {

}

Peer::Peer(QHostAddress ipAddress, quint16 port)
{
	this->ipAddress = ipAddress;
	this->port = port;
}


// Functions for peer
Peer::Peer(QString hostName, QHostAddress ipAddress, quint16 port)
{
	this->hostName = hostName;
	this->ipAddress = ipAddress;
	this->port = port;
}


QString Peer::getHostName() {
	return hostName;
}


void Peer::setHostName(QString name) {
	hostName = name;
}


QHostAddress Peer::getAddress() {
	return ipAddress;
}


void Peer::setAddress(QHostAddress address) {
	ipAddress = address;
}


quint16 Peer::getPort() {
	return port;
}


void Peer::setPort(quint16 portNum) {
	port = portNum;
}


// Constructor for MessageSender class
MessageSender::MessageSender()
{
	// Create instance of ChatDialog and show it
	chat = new ChatDialog();
	chat->show();

	// Create instance of NetSocket and bind it to UDP port
	socket = new NetSocket();
	if (!socket->bind())
		exit(1);

	// Private chat window and hop limit
	privateChat = new PrivateChat("");
	MultiLineEdit *privateChatEditor = privateChat->getTextLine();
	hopLimit = 5;

	// File Dialog Window
	fileDialog = new QFileDialog();
	fileDialog->setFileMode(QFileDialog::ExistingFiles);

	// Set chatCounter to 1 and create the statusMap and set noForward flag to default false
	QVariantMap wantMap;
	statusMap.insert("Want", wantMap);
	chatCounter = 1;
	noForward = false;

	// Add local peers
	int portMin = socket->getMyPortMin();
	int portMax = socket->getMyPortMax();
	int myPort = socket->getMyPortVal();
	for(int i=portMin; i<=portMax; i++) {
		if(i != myPort) {
			Peer* newPeer = new Peer(QHostInfo::localHostName(), QHostAddress::LocalHost, i);
			newPeer->setHostName(QHostInfo::localHostName());
			newPeer->setAddress(QHostAddress::LocalHost);
			newPeer->setPort(i);
			peerLst.push_back(*newPeer);

			QHostAddress address = QHostAddress::LocalHost;
			QString peerKey = address.toString() + ":" + QString::number(i);
			peerCheck.insert(peerKey);
		}
	}

	// Add command line peers
	QStringList args = QCoreApplication::arguments();
	if(args.size() > 1) {
		for(int i=1; i < args.size(); i++) {
			if(args[i] == "-noforward") {
				qDebug() << "NO FORWARD!!!" << endl;
				noForward = true;
			}
			else {
				addPeer(args[i]);
			}
		}
	}

	// Create a unique ID for this instance of MessageSender
	qint64 seedVal = QDateTime::currentMSecsSinceEpoch();
	qsrand(seedVal);
	QString idVal = QString::number(qrand());
	QString hostName = QHostInfo::localHostName();
	originID = hostName + idVal;

	// Get references to private members of ChatDialog
	MultiLineEdit* textline = chat->getTextLine();
	MultiLineEdit* addPeersLine = chat->getAddPeersLine();
	QListWidget *privateMsgList = chat->getPrivateMsgList();
	QPushButton *shareFileButton = chat->getShareFileButton();
	addInitialPrivateMsgPeers();

	// Create timer to send status every 10 seconds
	timer = new QTimer(this);

	// Create routing timer to send route rumor every minute
	routeRumorTimer = new QTimer(this);


	// ******** Signal->Slot connections ************************************************

	// User presses return after entering chat message
	connect(textline, SIGNAL(returnPressed()),
		this, SLOT(gotReturnPressed()));

	// User presses return after enter a "host:port" to add a peer
	connect(addPeersLine, SIGNAL(returnPressed()),
		this, SLOT(addGuiPeer()));

	// User double clicks a peer to start a private message
	connect(privateMsgList, SIGNAL(itemActivated(QListWidgetItem *)), this, SLOT(setupPrivateMessage(QListWidgetItem *)));

	// node receives a message
	connect(socket, SIGNAL(readyRead()),
		this, SLOT(onReceive()));

	// Route rumor message timer timeout
	connect(routeRumorTimer, SIGNAL(timeout()), this, SLOT(sendRouteRumorTimeout()));

	// Rumor Mongering timer timeout
	connect(timer, SIGNAL(timeout()), this, SLOT(sendTimeoutStatus()));

	// User sends a private message
	connect(privateChatEditor, SIGNAL(returnPressed()), this, SLOT(sendPriv
